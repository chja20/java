//오버로딩(Overloading)은 자바에서 메소드나 생성자의 이름은 같지만 매개변수의 개수나 데이터 타입이 다른 여러 개의 메소드나 생성자를 정의하는 것을 말한다
//메소드 이름이나 생성자 이름을 일관되고 의미 있는 방식으로 유지하면서 유사한 작업을 수행하는 메서드를 그룹화하는 데 사용

public class Calculator {                         //Calculator 클래스에는 add라는 메소드가 세 가지 오버로딩된 형태로 정의
    // 정수형 매개변수를 받는 add 메서드
    public int add(int a, int b) {
        return a + b;
    }
    
    // 실수형 매개변수를 받는 add 메서드
    public double add(double a, double b) {
        return a + b;
    }
    
    // 정수형 매개변수를 받는 add 메서드의 오버로딩
    public int add(int a, int b, int c) {
        return a + b + c;
    }
}

//이렇게 하면 같은 이름의 add 메서드를 사용하여 다양한 형태의 매개변수를 전달하여 다양한 연산을 수행할 수 있다.

package org.opentutorials.javatutorials.overloading.example1;
public class OverloadingDemo {
    void A (){System.out.println("void A()");}
    void A (int arg1){System.out.println("void A (int arg1)");}
    void A (String arg1){System.out.println("void A (String arg1)");}
    //int A (){System.out.println("void A()");}          //오류발생(리턴값이 다르기 때문에)
    public static void main(String[] args) {
        OverloadingDemo od = new OverloadingDemo();
        od.A();
        od.A(1);
        od.A("coding everybody");
    }
}

//위 클래스를 상속받은 Demo2이다
package org.opentutorials.javatutorials.overloading.example1;
public class OverloadingDemo2 extends OverloadingDemo{
    void A (String arg1, String arg2){System.out.println("sub class : void A (String arg1, String arg2)");}
    void A (){System.out.println("sub class : void A ()");}
    public static void main(String[] args) {
        OverloadingDemo2 od = new OverloadingDemo2();
        od.A();
        od.A(1);
        od.A("coding everybody");
        od.A("coding everybody", "coding everybody");
         
    }
}
//4행에서 정의된 메소드 A는 매개변수가 없다. 그리고 부모 클래스에는 이미 매개변수가 없는 메소드 A가 존재한다.
//이 둘은 매개변수의 형태가 같기 때문에 오버로딩이 아니라 오버라이딩에 해당한다.

class Calculator{
    int[] oprands;
     
    public void setOprands(int[] oprands){
        this.oprands = oprands;
    }
     
    public void sum(){
        int total = 0;
        for(int value : this.oprands){
            total += value;
        }
        System.out.println(total);
    }
      
    public void avg(){
        int total = 0;
        for(int value : this.oprands){
            total += value;
        }
        System.out.println(total/this.oprands.length);
    }
}
public class CalculatorDemo {
    public static void main(String[] args) {
        Calculator c1 = new Calculator();
        c1.setOprands(new int[]{10,20});
        c1.sum();       
        c1.avg();
        c1.setOprands(new int[]{10,20,30});
        c1.sum();       
        c1.avg();   
    }
}

//위의 코드는 인자로 배열을 사용하고 있다. 이렇게하면 하나의 인자로 여러개의 값을 받을 수 있다.
