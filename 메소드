//메소드
//메소드(method)는 코드를 재사용할 수 있게 해준다. 코드량이 줄고 유지보수가 쉽다

//형식
 public static void main(String[] args) {
      return
}

//예제
package org.opentutorials.javatutorials.method;
 
public class MethodDemo1 {
    public static void numbering() {
        int i = 0;
        while (i < 10) {
            System.out.println(i);                //여기서 정의를 하고
            i++;
        }
    }
 
    public static void main(String[] args) {
        numbering();                              //여기서 호출을 함
    }
}

0
1
2
3
4
5
6
7
8
9


//입력값 
//메소드의 입력 값은 매개변수(parameter)를 통해서 이루어진다

package org.opentutorials.javatutorials.method;
 
public class MethodDemo4 {
    public static void numbering(int limit) {  //매개변수
        int i = 0;
        while (i < limit) {
            System.out.println(i);
            i++;
        }
    }
 
    public static void main(String[] args) {
        numbering(5);        //인자
    }
}
 //복수인자도 가능
package org.opentutorials.javatutorials.method;
 
public class MethodDemo5 {
 
    public static void numbering(int init, int limit) {
        int i = init;
        while (i < limit) {
            System.out.println(i);
            i++;
        }
    }
 
    public static void main(String[] args) {
        numbering(1, 5);
    }
}


//출력

package org.opentutorials.javatutorials.method;
 
public class MethodDemo6 {
    public static String numbering(int init, int limit) {
        int i = init;
        String output = "";      // 만들어지는 숫자들을 output이라는 변수에 담기 위해서 변수에 빈 값을 주었다.
        while (i < limit) {            
            output += i;         // 숫자를 화면에 출력하는 대신 변수 output에 담았다.
            i++;
        }
        // 중요!!! output에 담겨 있는 문자열을 메소드 외부로 반환하려면 아래와 같이 return 키워드 뒤에 반환하려는 값을
        // 배치하면 된다.
        return output;
    }
 
    public static void main(String[] args) {
        // 메소드 numbering이 리턴한 값이 변수 result에 담긴다.
        String result = numbering(1, 5);
        // 변수 result의 값을 화면에 출력한다.
        System.out.println(result);
    }
}


//return 특성 
package org.opentutorials.javatutorials.method;
 
public class ReturnDemo {
    public static int one() {
        return 1;
        return 2;
        return 3;
    }
 
    public static void main(String[] args) {
        System.out.println(one());
    }
}
// 1까지만 출력됨
// return은 값을 반환하는 동작을 한다. 그런데 이것은 return에 대한 반쪽짜리 설명이다. return은 메소드를 중단시키는 역할도 한다 
public static void main(String[] args) {
System.out.println(one());
}


//복수의 리턴(원래 하나의 메소드는 하나의 값만을 반환)
//멤버를 담고 있는 배열을 반환.
public static String[] getMembers() {
String[] members = { "최진혁", "최유빈", "한이람" };
return members;
}

public static void main(String[] args) {
String[] members = getMembers();
}
